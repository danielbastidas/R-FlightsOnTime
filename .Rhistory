nrow(onTimeDataTraining)
nrow(onTimeDataTestingTrimmed)
# the percentage of data for training purposes
nrow(onTimeDataTraining)/nrow(onTimeDataFeaturesWithTimeBlocks)
# the percentage of data for testing purposes
nrow(onTimeDataTestingTrimmed)/nrow(onTimeDataFeaturesWithTimeBlocks)
# creating the training model. Notice the first parameter of the function is the value that we want to
# predict (onTime) and after the ~ character we put all the columns/features we want to use to predict
# the value. Then we specify the training data, the algorithm (in this case logistic regression), so R
# provides us the algorithm referencing it with the glm string and the family parameter binomial
logisticRegressionModel <- train(onTime ~ ., data = onTimeDataTraining, method="glm", family="binomial")
logisticRegressionModel
# now test our model to see how accurate it is
logisticRegressionPrediction <- predict(logisticRegressionModel, onTimeDataTestingTrimmed)
logisticRegressionPrediction
logRegressionConfussionMatrix <- confusionMatrix(logisticRegressionPrediction,
onTimeDataTestingTrimmed[,"onTime"])
# the output of the model is read it in the following way
#          Reference
#Prediction   0   1
#          0  16   6
#          1  37 198
#          Reference
#Prediction   0   1
#          0  A   B
#          1  C   D
# Notice that the predictions are the rows while the reference (the test data are the columns), so
# The number of flights in the test data that the model accurately predicted as not on time was 16 while
# the number of flights the model predicted as not on time that actually were on time in the testing data
# was 6.
# The number of flights in the test data that the model wrongly predicted as on time was 37 while the number
# of flights the model accurately predicted as on time in the test data was 198
# So that's why the accuracy of the model is 83.27% The formula is Accuracy = A+D / # of test rows
# = (16+198)/16+6+37+198 = 0.8327
# Sensitivity = A/(A+C) = 16/(16+37) = 0.30189 Sensitivity indicates how the model predict delay when
# there is delay
# specificity is the ability of the model to predict no delay (on time) when there is no delay (on time)
# specificity = D/(B+D) = 198/(6+198)
# the positive predictive value predicts when there will be delay is 0.72
# the formula is PPV = (Sensitivity * Prevalence) / ((Sensitivity * Prevalence) + ((1-Specificity) * (1-Prevalence)))
# where Prevalence = (A+C)/(A+B+C+D)
# the negative predictive value predicts when there will be no delay is 0.84
# the formula is NPV = (Specificity * (1-Prevalence)) / (((1-Sensitivity) * Prevalence) + ((Specificity) * (1-Prevalence)))
# Lets try another algorithm... the random forest one of the more complex emsemble algorithms
library(randomForest)
rfModel <- randomForest(onTimeDataTraining, onTimeDataTraining$onTime, proximity = TRUE, importance = TRUE)
rfModel
rfValidation <- predict(rfModel, onTimeDataTestingTrimmed)
# evaluate the performance of the model getting the confusion matrix
rfConfMatrix <- confusionMatrix(rfValidation, onTimeDataTestingTrimmed[,"onTime"])
# wow the accuracy of the model using the random forest algorithm went from 83% to 100%
rfConfMatrix
# try to predict a value for a given data (use your model)
View(onTimeDataFeaturesWithTimeBlocks)
class(onTimeDataFeaturesWithTimeBlocks$Wheels.on.Time.Block)
# try to predict a value for a given data (use your model)
predict(
object = rfModel,
newdata = data.frame(dayOfWeek="Fri", Origin.Airport="LAX", Wheels.on.Time.Block=as.factor("00:00"))
)
)
)
# try to predict a value for a given data (use your model)
predict(
object = rfModel,
newdata = data.frame(
dayOfWeek="Fri",
Origin.Airport="LAX",
Wheels.on.Time.Block="00:00")
)
# try to predict a value for a given data (use your model)
predictors <- data.frame(
dayOfWeek="Fri",
Origin.Airport="LAX",
Wheels.on.Time.Block="00:00"
)
predict(
object = rfModel,
newdata = predictors
)
predict(
object = logisticRegressionModel,
newdata = predictors
)
?randomForest
rfModel <- randomForest(onTime ~ ., onTimeDataTraining, proximity = TRUE, importance = TRUE)
rfModel
rfValidation <- predict(rfModel, onTimeDataTestingTrimmed)
# evaluate the performance of the model getting the confusion matrix
rfConfMatrix <- confusionMatrix(rfValidation, onTimeDataTestingTrimmed[,"onTime"])
# wow the accuracy of the model using the random forest algorithm went from 83% to 100%
rfConfMatrix
# try to predict a value for a given data (use your model)
predictors <- data.frame(
dayOfWeek="Fri",
Origin.Airport="LAX",
Wheels.on.Time.Block="00:00"
)
predict(
object = logisticRegressionModel,
newdata = predictors
)
predict(
object = rfModel,
newdata = predictors
)
# try to predict a value for a given data (use your model)
predictors <- data.frame(
dayOfWeek="Fri",
Origin.Airport="LAX",
Wheels.on.Time.Block=as.factor("00:00")
)
predict(
object = rfModel,
newdata = predictors
)
View(onTimeDataTraining)
# try to predict a value for a given data (use your model)
predictors <- data.frame(
dayOfWeek="Fri",
Origin.Airport="MIA",
Wheels.on.Time.Block=as.factor("00:00")
)
predict(
object = rfModel,
newdata = predictors
)
class(predictors)
class(predictors$dayOfWeek)
class(predictors$Origin.Airport)
class(predictors$Wheels.on.Time.Block)
class(onTimeDataTraining$dayOfWeek)
# try to predict a value for a given data (use your model)
predictors <- data.frame(
dayOfWeek=as.factor("Fri"),
Origin.Airport="MIA",
Wheels.on.Time.Block=as.factor("00:00")
)
predict(
object = rfModel,
newdata = predictors
)
class(predictors$dayOfWeek)
class(onTimeDataTraining$dayOfWeek)
class(onTimeDataTraining$Origin.Airport)
class(predictors$Origin.Airport)
class(predictors$Wheels.on.Time.Block)
class(onTimeDataTraining$Wheels.on.Time.Block)
# try to predict a value for a given data (use your model)
predictors <- data.frame(
dayOfWeek=as.ordered.factor("Fri"),
Origin.Airport="MIA",
Wheels.on.Time.Block=as.factor("00:00")
)
# try to predict a value for a given data (use your model)
predictors <- data.frame(
dayOfWeek=as.factor("Fri"),
Origin.Airport="MIA",
Wheels.on.Time.Block=as.factor("00:00")
)
predict(
object = rfModel,
newdata = predictors
)
predict(
object = logisticRegressionModel,
newdata = predictors
)
predict(
object = rfModel,
newdata = predictors
)
predictors$dayOfWeek <- factor(predictors$dayOfWeek, levels = levels(onTimeDataTraining$dayOfWeek))
predict(
object = rfModel,
newdata = predictors
)
predictors$Wheels.on.Time.Block <- factor(predictors$Wheels.on.Time.Block,
levels = levels(onTimeDataTraining$Wheels.on.Time.Block))
predict(
object = rfModel,
newdata = predictors
)
levels(onTimeDataTraining$dayOfWeek)
levels(predictors$dayOfWeek)
levels(predictors$Wheels.on.Time.Block)
levels(onTimeDataTraining$Wheels.on.Time.Block)
levels(onTimeDataTraining$Origin.Airport)
levels(predictors$Origin.Airport)
predict(
object = rfModel,
newdata = predictors
)
predictors$dayOfWeek <- factor(as.character(onTimeDataTraining$dayOfWeek))
predictors$Wheels.on.Time.Block <- factor(as.character(onTimeDataTraining$Wheels.on.Time.Block))
predict(
object = rfModel,
newdata = predictors
)
source('~/git-repo/R-FlightsOnTime/flight-delays.r')
predict(
object = rfModel,
newdata = predictors
)
predictors$dayOfWeek <- factor(as.character(onTimeDataTraining$dayOfWeek))
predictors$Wheels.on.Time.Block <- factor(as.character(onTimeDataTraining$Wheels.on.Time.Block))
predict(
object = rfModel,
newdata = predictors
)
View(onTimeDataTraining)
# try to predict a value for a given data (use your model)
predictors <- data.frame(
dayOfWeek=as.factor("Sun"),
Origin.Airport="MIA",
Wheels.on.Time.Block=as.factor("00:00")
)
predict(
object = rfModel,
newdata = predictors
)
predict(
object = rfModel,
newdata = predictors,
type = "response"
)
predict(
object = rfModel,
newdata = predictors,
type = "response",
predict.all = TRUE
)
predict(
object = rfModel,
newdata = predictors,
predict.all = TRUE
)
predict(rfModel, predictors)
predict(
object = rfModel,
newdata = predictors
)
plot(rfModel)
text(rfModel)
rfModel <- randomForest(onTime ~ ., onTimeDataTraining, proximity = TRUE, importance = TRUE)
rfValidation <- predict(rfModel, onTimeDataTestingTrimmed)
# evaluate the performance of the model getting the confusion matrix
rfConfMatrix <- confusionMatrix(rfValidation, onTimeDataTestingTrimmed[,"onTime"])
# wow the accuracy of the model using the random forest algorithm went is almost the same one 83.66%
rfConfMatrix
as.times(predictors$Wheels.on.Time.Block)
as.times(paste(predictors$Wheels.on.Time.Block,":00",sep = ""))
# try to predict a value for a given data (use your model)
predictors <- data.frame(
dayOfWeek=as.factor("Sun"),
Origin.Airport="MIA",
Wheels.on.Time.Block="00:00"  #as.factor("00:00")
)
predict(
object = rfModel,
newdata = predictors
)
# try to predict a value for a given data (use your model)
predictors <- data.frame(
dayOfWeek="Sun", #as.factor("Sun"),
Origin.Airport="MIA",
Wheels.on.Time.Block="00:00"  #as.factor("00:00")
)
predict(
object = rfModel,
newdata = predictors
)
# try to predict a value for a given data (use your model)
predictors <- data.frame(
dayOfWeek=as.factor("Sun"),
Origin.Airport="MIA",
Wheels.on.Time.Block="00:00"  #as.factor("00:00")
)
predict(
object = rfModel,
newdata = predictors
)
predictors
predictors$dayOfWeek
onTimeDataTraining$dayOfWeek
as.factor(c("Sun","Mon","Tue","Wed","Thu","Fri","Sat"))
# try to predict a value for a given data (use your model)
predictors <- data.frame(
dayOfWeek=as.factor(c("Sun","Mon","Tue","Wed","Thu","Fri","Sat")),
Origin.Airport="MIA",
Wheels.on.Time.Block="00:00"  #as.factor("00:00")
)
predict(
object = rfModel,
newdata = predictors
)
onTimeDataTraining$Wheels.on.Time.Block
# try to predict a value for a given data (use your model)
predictors <- data.frame(
dayOfWeek=as.factor(c("Sun","Mon","Tue","Wed","Thu","Fri","Sat")),
Origin.Airport="MIA",
Wheels.on.Time.Block=onTimeDataTraining$Wheels.on.Time.Block  #as.factor("00:00")
)
# try to predict a value for a given data (use your model)
predictors <- data.frame(
dayOfWeek=as.factor(c("Sun","Mon","Tue","Wed","Thu","Fri","Sat")),
Origin.Airport="MIA",
Wheels.on.Time.Block=as.factor(c("00:00","00:30","01:30","02:00","04:00",
"05:30","06:00","08:00","08:30","09:00",
"09:30","10:00","10:30","11:00","11:30",
"12:00","12:30","13:00","13:30","14:00",
"14:30","15:00","15:30","16:00","16:30",
"17:00","17:30","18:00","18:30","19:00",
"19:30","20:00","20:30","21:00","21:30",
"22:00","22:30","23:00","23:30","24:00"))  #as.factor("00:00")
)
###########################
onTimeDataTraining2$dayOfWeek <- as.character(onTimeDataTraining$dayOfWeek)
###########################
onTimeDataTraining2 <- df()
###########################
onTimeDataTraining2 <- ()
onTimeDataTraining2$dayOfWeek <- onTimeDataTraining[,featureCols]
onTimeDataTraining2 <- onTimeDataTraining[,featureCols]
onTimeDataTraining2$dayOfWeek <- as.character(onTimeDataTraining$dayOfWeek)
onTimeDataTraining2$Wheels.on.Time.Block <- as.character(onTimeDataTraining$Wheels.on.Time.Block)
rfModel2 <- randomForest(onTime ~ ., onTimeDataTraining2, proximity = TRUE, importance = TRUE)
rfModel2
onTimeDataTestingTrimmed2 <- onTimeDataTestingTrimmed[, featureCols]
onTimeDataTestingTrimmed2$dayOfWeek <- as.character(onTimeDataTestingTrimmed$dayOfWeek)
onTimeDataTestingTrimmed2$Wheels.on.Time.Block <- as.character(onTimeDataTestingTrimmed$Wheels.on.Time.Block)
rfValidation2 <- predict(rfModel2, onTimeDataTestingTrimmed2)
# evaluate the performance of the model getting the confusion matrix
rfConfMatrix2 <- confusionMatrix(rfValidation2, onTimeDataTestingTrimmed2[,"onTime"])
# wow the accuracy of the model using the random forest algorithm went is almost the same one 83.66%
rfConfMatrix2
# try to predict a value for a given data (use your model)
predictors <- data.frame(
dayOfWeek = "Fri",
Origin.Airport="MIA",
Wheels.on.Time.Block="00:00"
)
predict(
object = rfModel2,
newdata = predictors
)
predict(
object = rfModel2,
newdata = predictors
)
# try to predict a value for a given data (use your model)
predictors <- data.frame(
dayOfWeek = "Fri",
Origin.Airport="LAX",
Wheels.on.Time.Block="00:00"
)
predict(
object = rfModel2,
newdata = predictors
)
# try to predict a value for a given data (use your model)
predictors <- data.frame(
dayOfWeek = "Sun",
Origin.Airport="LAX",
Wheels.on.Time.Block="23:30"
)
predict(
object = rfModel2,
newdata = predictors
)
predictors
# try to predict a value for a given data (use your model)
predictors <- data.frame(
dayOfWeek = "Sun",
Origin.Airport="MIA",
Wheels.on.Time.Block="00:00"
)
predict(
object = rfModel2,
newdata = predictors
)
predict(
object = rfModel2,
newdata = predictors,
type = "response"
)
predict(
object = rfModel2,
newdata = predictors,
proximity = TRUE
)
predict(
object = rfModel2,
newdata = predictors,
cutoff = TRUE
)
predict(
object = rfModel2,
newdata = predictors
)
# try to predict a value for a given data (use your model)
predictors <- data.frame(
dayOfWeek = "Sun",
Origin.Airport="DFW",
Wheels.on.Time.Block="00:00"
)
predict(
object = rfModel2,
newdata = predictors
)
# try to predict a value for a given data (use your model)
predictors <- data.frame(
dayOfWeek = "Wed",
Origin.Airport="DFW",
Wheels.on.Time.Block="00:00"
)
predict(
object = rfModel2,
newdata = predictors
)
val3 <- predict(
object = rfModel2,
newdata = predictors
)
val3
?randomForest.predict
?randomForest
predict(
object = rfModel2,
newdata = predictors,
importance=TRUE
)
predict(
object = rfModel2,
newdata = predictors,
predict.all = FALSE
)
predict(
object = rfModel2,
newdata = predictors,
proximity = TRUE,
importance=TRUE
)
predict(
object = rfModel2,
newdata = predictors,
proximity = TRUE,
importance=TRUE,
type = "response"
)
predict(
object = rfModel2,
newdata = predictors,
proximity = TRUE,
importance=TRUE,
type = "prob"
)
predict(
object = rfModel2,
newdata = predictors,
#proximity = TRUE,
#importance=TRUE,
type = "prob"
)
predict(
object = rfModel2,
newdata = predictors,
#proximity = TRUE,
#importance=TRUE,
type = "votes"
)
predict(
object = rfModel2,
newdata = predictors,
#proximity = TRUE,
#importance=TRUE,
type = "vote"
)
predict(
object = rfModel2,
newdata = predictors,
#proximity = TRUE,
#importance=TRUE,
type = "response"
)
predict(
object = rfModel2,
newdata = predictors,
#proximity = TRUE,
#importance=TRUE,
type = "prob"
)
# try to predict a value for a given data (use your model)
predictors <- data.frame(
dayOfWeek = "Sat",
Origin.Airport="DFW",
Wheels.on.Time.Block="00:00"
)
predict(
object = rfModel2,
newdata = predictors,
#proximity = TRUE,
#importance=TRUE,
type = "prob"
)
predict(
object = rfModel2,
newdata = predictors,
#proximity = TRUE,
#importance=TRUE,
type = "prob"
)
